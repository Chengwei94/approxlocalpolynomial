#include <algorithm> 
#include <iostream>     
#include <memory> 
#include <vector>

using point_t = std::vector< double >;
using all_point_t = std::vector<point_t>; 
void split_by_middle(std::vector<point_t>, int , double);

class kdnode{ 
            public: 
                int n_below; 
                int split_d; 
                double split_v;
                std::vector<double> max_dim; 
                std::vector<double> min_dim;
                std::unique_ptr<kdnode> right_child; 
                std::unique_ptr<kdnode> left_child; 
                all_point_t points; 

                kdnode(); // constructor 
                kdnode(kdnode&&) ;  //move 
                ~kdnode();  // destructor    
};

class kdtree{
    public:     
        kdtree(); 
        ~kdtree(); 
        std::unique_ptr<kdnode> root; 
        std::unique_ptr<kdnode> leaf;
        explicit kdtree(all_point_t, int); 

        get_XtX(const point_t& query_pt);
        get_XtY(const point_t& query_pt);
        get_sumY(const point_t& query_pt);
        get_sumX(const point_t& query_pt); 

        std::unique_ptr<kdnode> build_tree(all_point_t::iterator, all_point_t::iterator, int, double, int, size_t, point_t, point_t, int);
    
};

